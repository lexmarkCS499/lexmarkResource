name: Build, Push Docker Image, and Deploy

on:
  push:
    branches:
      - dev
      - staging
      - prod

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Set up Docker Buildx (for multi-platform builds)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Step 3: Log in to DockerHub
      - name: Log in to DockerHub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Step 4: Build and push the Docker image to DockerHub
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: src/Dockerfile  # Specify the path to your Dockerfile
          push: true
          tags: lexmarkkubernetes/my-app:${{ github.ref_name }}

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository again
      - name: Checkout repository
        uses: actions/checkout@v2

      #Step 2: ArgoCd Login
      - name: ArgoCD Login and sync
        env:
          ARGOCD_SERVER: http://localhost:8080
          ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}
        run: |
          # Set up authentication with environment variables
          export ARGOCD_OPTS="--server $ARGOCD_SERVER --auth-token $ARGOCD_AUTH_TOKEN"
          # Optionally, verify the connection
          argocd account get-user-info

      # Step 2: Sync ArgoCD to deploy the updated image
      - name: Sync ArgoCD Application
        run: |
          if [ "${{ github.ref_name }}" == "dev" ]; then
            argocd app sync dev-myapp-argo-application --prune
          elif [ "${{ github.ref_name }}" == "staging" ]; then
            argocd app sync staging-myapp-argo-application --prune
          elif [ "${{ github.ref_name }}" == "prod" ]; then
            argocd app sync prod-myapp-argo-application --prune
          fi